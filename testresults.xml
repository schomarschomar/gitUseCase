<?xml version="1.0" encoding="UTF-8"?>
<testsuites duration="50.5" package="AppInspect">
    <testsuite failures="1" name="AppInspect|Alert actions structure and standards" package="AppInspect|Alert actions structure and standards" tests="3" time="0.256">
        <testcase classname="AppInspect|Alert actions structure and standards" name="AppInspect|Alert actions structure and standards|Test Case 001" time="0.103"/>
        <testcase classname="AppInspect|Alert actions structure and standards" name="AppInspect|Alert actions structure and standards|Test Case 002" time="0.146"/>
        <testcase classname="AppInspect|Alert actions structure and standards" name="AppInspect|Alert actions structure and standards|Test Case 003" time="0.007"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|App conf standards" package="AppInspect|App conf standards" tests="1" time="0.449">
        <testcase classname="AppInspect|App conf standards" name="AppInspect|App conf standards|Test Case 001" time="0.449"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Application content structure standards" package="AppInspect|Application content structure standards" tests="8" time="0.101">
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 001" time="0.1"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 002" time="0"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 003" time="0"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 004" time="0.001"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 005" time="0"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 006" time="0"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 007" time="0"/>
        <testcase classname="AppInspect|Application content structure standards" name="AppInspect|Application content structure standards|Test Case 008" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Appropriate use of sensitive functionality" package="AppInspect|Appropriate use of sensitive functionality" tests="4" time="0.945">
        <testcase classname="AppInspect|Appropriate use of sensitive functionality" name="AppInspect|Appropriate use of sensitive functionality|Test Case 001" time="0.681"/>
        <testcase classname="AppInspect|Appropriate use of sensitive functionality" name="AppInspect|Appropriate use of sensitive functionality|Test Case 002" time="0.174"/>
        <testcase classname="AppInspect|Appropriate use of sensitive functionality" name="AppInspect|Appropriate use of sensitive functionality|Test Case 003" time="0.046"/>
        <testcase classname="AppInspect|Appropriate use of sensitive functionality" name="AppInspect|Appropriate use of sensitive functionality|Test Case 004" time="0.044"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Authentication conf file standards" package="AppInspect|Authentication conf file standards" tests="22" time="1.211">
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 001" time="0.405"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 002" time="0.2"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 003" time="0.204"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 004" time="0.002"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 005" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 006" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 007" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 008" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 009" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 010" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 011" time="0.193"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 012" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 013" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 014" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 015" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 016" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 017" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 018" time="0"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 019" time="0.095"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 020" time="0.002"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 021" time="0.001"/>
        <testcase classname="AppInspect|Authentication conf file standards" name="AppInspect|Authentication conf file standards|Test Case 022" time="0.102"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Authorize conf file standards" package="AppInspect|Authorize conf file standards" tests="2" time="0.496">
        <testcase classname="AppInspect|Authorize conf file standards" name="AppInspect|Authorize conf file standards|Test Case 001" time="0.398"/>
        <testcase classname="AppInspect|Authorize conf file standards" name="AppInspect|Authorize conf file standards|Test Case 002" time="0.098"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Calls to external data sources" package="AppInspect|Calls to external data sources" tests="2" time="0.303">
        <testcase classname="AppInspect|Calls to external data sources" name="AppInspect|Calls to external data sources|Test Case 001" time="0.302"/>
        <testcase classname="AppInspect|Calls to external data sources" name="AppInspect|Calls to external data sources|Test Case 002" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Cloud operations simple application check" package="AppInspect|Cloud operations simple application check" tests="1" time="0.4">
        <testcase classname="AppInspect|Cloud operations simple application check" name="AppInspect|Cloud operations simple application check|Test Case 001" time="0.4"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Configuration file standards" package="AppInspect|Configuration file standards" tests="2" time="0.41">
        <testcase classname="AppInspect|Configuration file standards" name="AppInspect|Configuration file standards|Test Case 001" time="0.405"/>
        <testcase classname="AppInspect|Configuration file standards" name="AppInspect|Configuration file standards|Test Case 002" time="0.005"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Configurations that relate to running Splunk instances" package="AppInspect|Configurations that relate to running Splunk instances" tests="13" time="0.395">
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 001" time="0.189"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 002" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 003" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 004" time="0.001"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 005" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 006" time="0.001"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 007" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 008" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 009" time="0.001"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 010" time="0"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 011" time="0.001"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 012" time="0.202"/>
        <testcase classname="AppInspect|Configurations that relate to running Splunk instances" name="AppInspect|Configurations that relate to running Splunk instances|Test Case 013" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Custom search command structure and standards" package="AppInspect|Custom search command structure and standards" tests="5" time="0.194">
        <testcase classname="AppInspect|Custom search command structure and standards" name="AppInspect|Custom search command structure and standards|Test Case 001" time="0.193"/>
        <testcase classname="AppInspect|Custom search command structure and standards" name="AppInspect|Custom search command structure and standards|Test Case 002" time="0"/>
        <testcase classname="AppInspect|Custom search command structure and standards" name="AppInspect|Custom search command structure and standards|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|Custom search command structure and standards" name="AppInspect|Custom search command structure and standards|Test Case 004" time="0"/>
        <testcase classname="AppInspect|Custom search command structure and standards" name="AppInspect|Custom search command structure and standards|Test Case 005" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Custom visualizations support checks" package="AppInspect|Custom visualizations support checks" tests="1" time="0.302">
        <testcase classname="AppInspect|Custom visualizations support checks" name="AppInspect|Custom visualizations support checks|Test Case 001" time="0.302"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Custom workflow actions structure and standards" package="AppInspect|Custom workflow actions structure and standards" tests="1" time="0.401">
        <testcase classname="AppInspect|Custom workflow actions structure and standards" name="AppInspect|Custom workflow actions structure and standards|Test Case 001" time="0.401"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Data model files and configurations" package="AppInspect|Data model files and configurations" tests="5" time="4.775">
        <testcase classname="AppInspect|Data model files and configurations" name="AppInspect|Data model files and configurations|Test Case 001" time="0.467"/>
        <testcase classname="AppInspect|Data model files and configurations" name="AppInspect|Data model files and configurations|Test Case 002" time="0.501"/>
        <testcase classname="AppInspect|Data model files and configurations" name="AppInspect|Data model files and configurations|Test Case 003" time="0.3"/>
        <testcase classname="AppInspect|Data model files and configurations" name="AppInspect|Data model files and configurations|Test Case 004" time="0.301"/>
        <testcase classname="AppInspect|Data model files and configurations" name="AppInspect|Data model files and configurations|Test Case 005" time="0.101"/>        
    </testsuite>
    <testsuite failures="0" name="AppInspect|Directory structure standards" package="AppInspect|Directory structure standards" tests="19" time="1.341">
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 001" time="0.346"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 002" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 003" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 004" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 005" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 006" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 007" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 008" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 009" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 010" time="0.089"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 011" time="0.102"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 012" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 013" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 014" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 015" time="0.001"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 016" time="0"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 017" time="0.197"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 018" time="0.299"/>
        <testcase classname="AppInspect|Directory structure standards" name="AppInspect|Directory structure standards|Test Case 019" time="0.301"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Documentation standards" package="AppInspect|Documentation standards" tests="14" time="2.002">
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 001" time="0.604"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 002" time="0"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 004" time="0"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 005" time="0.298"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 006" time="0.001"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 007" time="0"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 008" time="0.001"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 009" time="0.297"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 010" time="0.301"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 011" time="0.001"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 012" time="0"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 013" time="0.298"/>
        <testcase classname="AppInspect|Documentation standards" name="AppInspect|Documentation standards|Test Case 014" time="0.2"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Dynamic checks for modular inputs" package="AppInspect|Dynamic checks for modular inputs" tests="3" time="0.309">
        <testcase classname="AppInspect|Dynamic checks for modular inputs" name="AppInspect|Dynamic checks for modular inputs|Test Case 001" time="0.307"/>
        <testcase classname="AppInspect|Dynamic checks for modular inputs" name="AppInspect|Dynamic checks for modular inputs|Test Case 002" time="0.001"/>
        <testcase classname="AppInspect|Dynamic checks for modular inputs" name="AppInspect|Dynamic checks for modular inputs|Test Case 003" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" package="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" tests="4" time="0.599">
        <testcase classname="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" name="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis|Test Case 001" time="0.395"/>
        <testcase classname="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" name="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis|Test Case 002" time="0.203"/>
        <testcase classname="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" name="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis" name="AppInspect|Dynamic checks for Python Abstract Syntax Tree analysis|Test Case 004" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Dynamic checks for search exceptions" package="AppInspect|Dynamic checks for search exceptions" tests="4" time="1.098">
        <testcase classname="AppInspect|Dynamic checks for search exceptions" name="AppInspect|Dynamic checks for search exceptions|Test Case 001" time="0.801"/>
        <testcase classname="AppInspect|Dynamic checks for search exceptions" name="AppInspect|Dynamic checks for search exceptions|Test Case 002" time="0.2"/>
        <testcase classname="AppInspect|Dynamic checks for search exceptions" name="AppInspect|Dynamic checks for search exceptions|Test Case 003" time="0.097"/>
        <testcase classname="AppInspect|Dynamic checks for search exceptions" name="AppInspect|Dynamic checks for search exceptions|Test Case 004" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Features impacted by Splunk Python 3 release" package="AppInspect|Features impacted by Splunk Python 3 release" tests="5" time="0.505">
        <testcase classname="AppInspect|Features impacted by Splunk Python 3 release" name="AppInspect|Features impacted by Splunk Python 3 release|Test Case 001" time="0.305"/>
        <testcase classname="AppInspect|Features impacted by Splunk Python 3 release" name="AppInspect|Features impacted by Splunk Python 3 release|Test Case 002" time="0.198"/>
        <testcase classname="AppInspect|Features impacted by Splunk Python 3 release" name="AppInspect|Features impacted by Splunk Python 3 release|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|Features impacted by Splunk Python 3 release" name="AppInspect|Features impacted by Splunk Python 3 release|Test Case 004" time="0.001"/>
        <testcase classname="AppInspect|Features impacted by Splunk Python 3 release" name="AppInspect|Features impacted by Splunk Python 3 release|Test Case 005" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Indexes conf file standards" package="AppInspect|Indexes conf file standards" tests="2" time="0.522">
        <testcase classname="AppInspect|Indexes conf file standards" name="AppInspect|Indexes conf file standards|Test Case 001" time="0.522"/>
        <testcase classname="AppInspect|Indexes conf file standards" name="AppInspect|Indexes conf file standards|Test Case 002" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|Intellectual property standards" package="AppInspect|Intellectual property standards" tests="4" time="0.578">
        <testcase classname="AppInspect|Intellectual property standards" name="AppInspect|Intellectual property standards|Test Case 001" time="0.177"/>
        <testcase classname="AppInspect|Intellectual property standards" name="AppInspect|Intellectual property standards|Test Case 002" time="0.304"/>
        <testcase classname="AppInspect|Intellectual property standards" name="AppInspect|Intellectual property standards|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|Intellectual property standards" name="AppInspect|Intellectual property standards|Test Case 004" time="0.096"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|ITSI module file and folder structure verification" package="AppInspect|ITSI module file and folder structure verification" tests="10" time="0.41">
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 001" time="0.403"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 002" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 003" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 004" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 005" time="0"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 006" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 007" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 008" time="0"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 009" time="0.001"/>
        <testcase classname="AppInspect|ITSI module file and folder structure verification" name="AppInspect|ITSI module file and folder structure verification|Test Case 010" time="0"/>        
    </testsuite>
    <testsuite failures="0" name="AppInspect|JavaScript file standards" package="AppInspect|JavaScript file standards" tests="2" time="0.395">
        <testcase classname="AppInspect|JavaScript file standards" name="AppInspect|JavaScript file standards|Test Case 001" time="0.395"/>
        <testcase classname="AppInspect|JavaScript file standards" name="AppInspect|JavaScript file standards|Test Case 002" time="0"/>
    </testsuite>
    <testsuite failures="0" name="AppInspect|JSON file standards" package="AppInspect|JSON file standards" tests="3" time="1.406">
        <testcase classname="AppInspect|JSON file standards" name="AppInspect|JSON file standards|Test Case 001" time="0.198"/>
        <testcase classname="AppInspect|JSON file standards" name="AppInspect|JSON file standards|Test Case 002" time="0.002"/>
        <testcase classname="AppInspect|JSON file standards" name="AppInspect|JSON file standards|Test Case 003" time="0.001"/>        
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/popup.js" package="tests/suites/casper/popup" tests="25" time="3.11">
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.created&quot; event is fired" time="0.308"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.created&quot; event callback get a popup page instance" time="0.001"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.loaded&quot; event is fired" time="0.022"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.loaded&quot; is triggered when popup content is actually loaded" time="0"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.waitForPopup() waits for a popup being created" time="0.47"/>
        <testcase classname="tests/suites/casper/popup" name="A popup has been added" time="0.001"/>
        <testcase classname="tests/suites/casper/popup" name="A popup is a WebPage" time="0"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() switched to popup as current active one" time="0.202"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() has client utils injected" time="0.001"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() can perform assertions on the DOM" time="0.001"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() can perform assertions on the DOM using XPath" time="0"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() has reverted to main page after using the popup" time="0.196"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.closed&quot; event is fired" time="0.102"/>
        <testcase classname="tests/suites/casper/popup" name="Popup is removed when closed" time="0.103"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.created&quot; event is fired" time="0.103"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.created&quot; event callback get a popup page instance" time="0"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.loaded&quot; event is fired" time="0.021"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.loaded&quot; is triggered when popup content is actually loaded" time="0.001"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.waitForPopup() waits for a popup being created" time="0.373"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() can use a regexp to identify popup" time="0.202"/>
        <testcase classname="tests/suites/casper/popup" name="&quot;popup.closed&quot; event is fired" time="0.2"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.withPopup() has reverted to main page after using the popup" time="0.104"/>
        <testcase classname="tests/suites/casper/popup" name="Popup is removed when closed" time="0"/>
        <testcase classname="tests/suites/casper/popup" name="Casper.waitForPopup() waits when clicked on a link with target=_blank" time="0.496"/>
        <testcase classname="tests/suites/casper/popup" name="Page title is: &quot;CasperJS test form&quot;" time="0.203"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/prompt.js" package="tests/suites/casper/prompt" tests="1" time="0.501">
        <testcase classname="tests/suites/casper/prompt" name="prompted value has been received" time="0.501"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/request.js" package="tests/suites/casper/request" tests="3" time="0.502">
        <testcase classname="tests/suites/casper/request" name="Casper.open() sets no custom header by default" time="0.3"/>
        <testcase classname="tests/suites/casper/request" name="Casper.open() can set a custom header" time="0.102"/>
        <testcase classname="tests/suites/casper/request" name="Casper.open() custom headers option is not persistent" time="0.1"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/resources.coffee" package="tests/suites/casper/resources" tests="5" time="1.616">
        <testcase classname="tests/suites/casper/resources" name="only one resource found" time="0.415"/>
        <testcase classname="tests/suites/casper/resources" name="two resources found" time="1.201"/>
        <testcase classname="tests/suites/casper/resources" name="phantom image found via test RegExp" time="0"/>
        <testcase classname="tests/suites/casper/resources" name="phantom image found via test Function" time="0"/>
        <testcase classname="tests/suites/casper/resources" name="phantom image found via test String" time="0"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/scripts.js" package="tests/suites/casper/scripts" tests="6" time="0.993">
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a first remote script on start" time="0.789"/>
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a second remote script on start" time="0.001"/>
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a really remote file on first step" time="0"/>
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a first remote script on second step" time="0.201"/>
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a second remote script on second step" time="0.001"/>
        <testcase classname="tests/suites/casper/scripts" name="Casper.includeRemoteScripts() includes a really remote file on second step" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/start.js" package="tests/suites/casper/start" tests="4" time="0.4">
        <testcase classname="tests/suites/casper/start" name="Casper.start() started" time="0.197"/>
        <testcase classname="tests/suites/casper/start" name="Casper.start() can chain a next step" time="0.202"/>
        <testcase classname="tests/suites/casper/start" name="Casper.start() opened the passed url" time="0.001"/>
        <testcase classname="tests/suites/casper/start" name="Casper.start() injects ClientUtils instance within remote DOM" time="0"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/steps.js" package="tests/suites/casper/steps" tests="8" time="0.808">
        <testcase classname="tests/suites/casper/steps" name="Casper.then() can add a new step" time="0.2"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.thenOpen() can add a new step" time="0"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.thenOpen() can add a new step for opening, plus another step" time="0.001"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.each() passes a contextualized index" time="0.001"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.each() passes a contextualized index" time="0"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.each() passes a contextualized index" time="0"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.then() added a new step" time="0.305"/>
        <testcase classname="tests/suites/casper/steps" name="Casper.thenOpen() opened a location and executed a step" time="0.301"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/urls.js" package="tests/suites/casper/urls" tests="6" time="0.696">
        <testcase classname="tests/suites/casper/urls" name="HTTP status code is: 200" time="0.496"/>
        <testcase classname="tests/suites/casper/urls" name="Casper.getCurrentUrl() retrieves a raw unicode URL" time="0.001"/>
        <testcase classname="tests/suites/casper/urls" name="HTTP status code is: 200" time="0.099"/>
        <testcase classname="tests/suites/casper/urls" name="Casper.getCurrentUrl() retrieves an escaped URL" time="0.001"/>
        <testcase classname="tests/suites/casper/urls" name="HTTP status code is: 200" time="0.098"/>
        <testcase classname="tests/suites/casper/urls" name="Casper.getCurrentUrl() retrieves a decoded URL" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/viewport.js" package="tests/suites/casper/viewport" tests="3" time="0.098">
        <testcase classname="tests/suites/casper/viewport" name="Casper.viewport() can change the width of page viewport" time="0.097"/>
        <testcase classname="tests/suites/casper/viewport" name="Casper.viewport() can change the height of page viewport" time="0"/>
        <testcase classname="tests/suites/casper/viewport" name="Casper.viewport() validates viewport size data" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/visible.js" package="tests/suites/casper/visible" tests="4" time="1.502">
        <testcase classname="tests/suites/casper/visible" name="Casper.visible() can detect if an element is visible" time="0.303"/>
        <testcase classname="tests/suites/casper/visible" name="Casper.visible() can detect if an element is invisible" time="0"/>
        <testcase classname="tests/suites/casper/visible" name="Casper.visible() can detect if an element is invisible" time="0.001"/>
        <testcase classname="tests/suites/casper/visible" name="Casper.waitWhileVisible() can wait while an element is visible" time="1.198"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/wait.js" package="tests/suites/casper/wait" tests="3" time="6.212">
        <testcase classname="tests/suites/casper/wait" name="Casper.wait() can wait for a given amount of time" time="1.505"/>
        <testcase classname="tests/suites/casper/wait" name="Casper.waitFor() can wait for something to happen" time="2.303"/>
        <testcase classname="tests/suites/casper/wait" name="Casper.waitForText() can wait for text" time="2.404"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/casper/xpath.js" package="tests/suites/casper/xpath" tests="6" time="0.608">
        <testcase classname="tests/suites/casper/xpath" name="XPath selector can find an element" time="0.406"/>
        <testcase classname="tests/suites/casper/xpath" name="XPath selector does not retrieve an unexistent element" time="0.001"/>
        <testcase classname="tests/suites/casper/xpath" name="selectXPath() shortcut can find an element as well" time="0.001"/>
        <testcase classname="tests/suites/casper/xpath" name="Correct number of elements are found" time="0.001"/>
        <testcase classname="tests/suites/casper/xpath" name="Clicking XPath works as expected" time="0.196"/>
        <testcase classname="tests/suites/casper/xpath" name="Casper.fill() can fill an input[type=text] form field" time="0.003"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/cli.js" package="tests/suites/cli" tests="76" time="0.209">
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0.194"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() does not return inexistant positional arg" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() does not return inexistant option" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() does not return inexistant positional arg" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() does not return inexistant option" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a raw arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a raw option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve first positional arg" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve second positional arg" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is not set" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional raw args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected raw options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve first positional raw arg" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve second positional raw arg" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a arw arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a arw arg is set" time="0.001"/>
        <testcase classname="tests/suites/cli" name="has() checks if a arw arg is not set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve an option value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve boolean option flag" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0.001"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional raw args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options raw object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve an option raw value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() retrieve boolean raw option flag" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a raw option is set" time="0.001"/>
        <testcase classname="tests/suites/cli" name="has() checks if a raw option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() handles options with exotic names" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional raw args array" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options raw object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() handles raw options with exotic names" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if a raw option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional args array" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a numeric option value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a float option value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a boolean value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can get a flag value by its option name" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a boolean value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a boolean value" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an arg is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0.001"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="has() checks if an option is set" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() dropped arg" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() dropped option" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() did not affect other args" time="0.001"/>
        <testcase classname="tests/suites/cli" name="drop() did not affect other options" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected positional raw args array" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() returns expected options raw object" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() does not a raw numeric option value" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() does not cast a raw float option value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() does not cast a numeric value" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can get a flag value by its option name" time="0"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a boolean value" time="0.001"/>
        <testcase classname="tests/suites/cli" name="parse() can cast a boolean value" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() dropped raw arg" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() dropped raw option" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() did not affect other raw args" time="0"/>
        <testcase classname="tests/suites/cli" name="drop() did not affect other raw options" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/clientutils.js" package="tests/suites/clientutils" tests="40" time="0.211">
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes an empty string" time="0.086"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes a word" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes a null char" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes an utf8 string" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes song lyrics" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.encode() encodes and decodes a file contents" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.exists() checks that an element exist" time="0.002"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.exists() checks that an element exist" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.exists() checks that an element exist" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.exists() checks that an element exist using XPath" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.exists() checks that an element exist using XPath" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements within a given scope" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements within a given scope" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findAll() can find matching DOM elements using XPath within a given scope" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findOne() can find a matching DOM element" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findOne() can find a matching DOM element" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findOne() can find a matching DOM element within a given scope" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.findOne() can find a matching DOM element using XPath within a given scope" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a CSS3 selector" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a CSS3 selector" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a CSS3 selector" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a XPath selector" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a XPath selector" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.processSelector() can process a XPath selector" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element name" time="0.005"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element attributes" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element html content" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element text" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element x pos" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element y pos" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element width" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element height" time="0.001"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element visibility" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementInfo() retrieves element whole tag contents" time="0"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementsBounds() retrieves multiple elements boundaries" time="0.107"/>
        <testcase classname="tests/suites/clientutils" name="ClientUtils.getElementsBounds() retrieves multiple elements boundaries" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/coffee.coffee" package="tests/suites/coffee" tests="4" time="0.593">
        <testcase classname="tests/suites/coffee" name="Casper.start() casper can start itself an open an url" time="0.394"/>
        <testcase classname="tests/suites/coffee" name="Casper.fetchText() can retrieves text contents" time="0.001"/>
        <testcase classname="tests/suites/coffee" name="Casper.click() casper can click on a text link" time="0.099"/>
        <testcase classname="tests/suites/coffee" name="Casper.options.onStepComplete() is called on step complete" time="0.099"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/fs.js" package="tests/suites/fs" tests="14" time="0.084">
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for /local/plop/foo.js" time="0.081"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for local/plop/foo.js" time="0.001"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for ./local/plop/foo.js" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for c:\local\plop\foo.js" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for D:\local\plop\foo.js" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for D:\local\plop\" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for c:\" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.dirname() does its job for c:" time="0.001"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for /" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for /local/plop/foo.js" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for D:\local\plop\" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for c:\" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for c:" time="0"/>
        <testcase classname="tests/suites/fs" name="fs.isWindows() does its job for \\Server\Plop" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/http_status.js" package="tests/suites/http_status" tests="109" time="11.124">
        <testcase classname="tests/suites/http_status" name="file:// protocol does not set a HTTP status" time="0.305"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 101" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 102" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 118" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 200" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 201" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 202" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 203" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 204" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 205" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.203"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 206" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.203"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 207" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.197"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 210" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 300" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 301" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 302" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.202"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 303" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.197"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 304" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 305" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 307" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 310" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.198"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 400" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.203"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 401" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.196"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 402" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 403" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 404" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 405" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 406" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.204"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 407" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.196"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 408" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 409" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 410" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 411" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 412" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 413" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.202"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 414" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 415" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 416" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 417" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 418" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 422" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 423" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.199"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 424" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 425" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 426" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 449" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 450" time="0.001"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 500" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 501" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 502" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.202"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 503" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 504" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.2"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 505" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.201"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 507" time="0"/>
        <testcase classname="tests/suites/http_status" name="Subject equals the expected value" time="0.202"/>
        <testcase classname="tests/suites/http_status" name="HTTP status code is: 509" time="0"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/injector.js" package="tests/suites/injector" tests="12" time="0.208">
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() returns an object" time="0.204"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() process function name as expected" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() process function body as expected" time="0.001"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() process function args as expected" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() handles named functions with arguments and body" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() handles functions with no arguments" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() handles functions with no body" time="0.001"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() handles anonymous functions with complex args passed" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.extract() handles can filter comments in function args" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.process() processed a function" time="0.001"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.process() processed the function correctly" time="0"/>
        <testcase classname="tests/suites/injector" name="FunctionArgsInjector.process() has issue #129 fixed" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/popup.js" package="tests/suites/popup" tests="14" time="0.112">
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.099"/>
        <testcase classname="tests/suites/popup" name="Subject is strictly true" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.004"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.001"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.001"/>
        <testcase classname="tests/suites/popup" name="Subject is strictly true" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.004"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0.003"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/popup" name="Subject equals the expected value" time="0"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/require.js" package="tests/suites/require" tests="3" time="0.098">
        <testcase classname="tests/suites/require" name="require() patched version can load a js module" time="0.088"/>
        <testcase classname="tests/suites/require" name="require() patched version can load a coffeescript module" time="0.009"/>
        <testcase classname="tests/suites/require" name="require() patched version can load a json module" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="Untitled suite in /Users/niko/Sites/casperjs/tests/suites/tester.js" package="tests/suites/tester" tests="55" time="0.706">
        <testcase classname="tests/suites/tester" name="findTestFiles() find test files and sort them" time="0.089"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTextExists() checks that page body contains text" time="0.205"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTextExist() checks that page body contains text [alias]" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTextDoesntExist() checks that page body doesn't contain provided text" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertSelectorHasText() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertSelectorDoesntHaveText() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assert() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTrue() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTruthy() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertFalsy() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertNot() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEquals() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEqual() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertNotEquals() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEval() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEvaluate() works as expected [alias]" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEvalEquals() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertEvalEqual() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertExists() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertExist() works as expected [alias]" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertSelectorExists() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertSelectorExist() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertDoesntExist() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertNotExist() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertHttpStatus() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertMatch() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertMatches() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertRaises() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertRaise() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertThrows() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertResourceExists() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertResourceExist() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTitle() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTitleMatch() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertTitleMatches() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertType() works as expected" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertUrlMatch() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertUrlMatches() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertVisible() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertNotVisible() works as expected" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertInvisible() works as expected [alias]" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with inputs" time="0.192"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with textarea" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with checkboxes" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with radios" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with selects" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with file inputs" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with check lists" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with inputs" time="0.196"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with textarea" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with checkboxes" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with radios" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with selects" time="0.001"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with file inputs" time="0"/>
        <testcase classname="tests/suites/tester" name="Tester.assertField() works as expected with check lists" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="utils.betterTypeOf() tests" package="tests/suites/utils" tests="10" time="0.187">
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;number&quot;" time="0.184"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;string&quot;" time="0.001"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;object&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;array&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;undefined&quot;" time="0.001"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;null&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;function&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;domwindow&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;date&quot;" time="0"/>
        <testcase classname="tests/suites/utils" name="betterTypeOf() detects expected type &quot;regexp&quot;" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="utils.cleanUrl() tests" package="tests/suites/utils" tests="10" time="0.002">
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0.001"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0.001"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
        <testcase classname="tests/suites/utils" name="cleanUrl() cleans an URL" time="0"/>
    </testsuite>
    <testsuite failures="0" name="utils.clone() tests" package="tests/suites/utils" tests="2" time="0.001">
        <testcase classname="tests/suites/utils" name="Subject equals the expected value" time="0"/>
        <testcase classname="tests/suites/utils" name="Subject equals the expected value" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="equals() tests" package="tests/suites/utils" tests="23" time="0.004">
        <testcase classname="tests/suites/utils" name="equals() null equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() null vs. undefined inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() string equality" time="0.001"/>
        <testcase classname="tests/suites/utils" name="equals() string inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() number equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() number equality without implicit cast" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() number equality with cast" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() number inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() empty array equality" time="0.001"/>
        <testcase classname="tests/suites/utils" name="equals() array equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() complex array equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() complex array inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() shuffled array inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() array length inequality" time="0.001"/>
        <testcase classname="tests/suites/utils" name="equals() empty object equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() object length equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() shuffled object keys equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() object inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() complex object equality" time="0.001"/>
        <testcase classname="tests/suites/utils" name="equals() complex object inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() function equality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() function inequality" time="0"/>
        <testcase classname="tests/suites/utils" name="equals() arrays of objects" time="0"/>
    </testsuite>
    <testsuite failures="0" name="fileExt() tests" package="tests/suites/utils" tests="6" time="0.002">
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0.001"/>
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0"/>
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0"/>
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0"/>
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0"/>
        <testcase classname="tests/suites/utils" name="fileExt() extract file extension" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="fillBlanks() tests" package="tests/suites/utils" tests="3" time="0">
        <testcase classname="tests/suites/utils" name="fillBlanks() fills blanks" time="0"/>
        <testcase classname="tests/suites/utils" name="fillBlanks() fills blanks" time="0"/>
        <testcase classname="tests/suites/utils" name="fillBlanks() fills blanks" time="0"/>
    </testsuite>
    <testsuite failures="0" name="getPropertyPath() tests" package="tests/suites/utils" tests="7" time="0.002">
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0.001"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0.001"/>
        <testcase classname="tests/suites/utils" name="getPropertyPath() gets a property using a path" time="0"/>
    </testsuite>
    <testsuite failures="0" name="isArray() tests" package="tests/suites/utils" tests="3" time="0">
        <testcase classname="tests/suites/utils" name="isArray() checks for an Array" time="0"/>
        <testcase classname="tests/suites/utils" name="isArray() checks for an Array" time="0"/>
        <testcase classname="tests/suites/utils" name="isArray() checks for an Array" time="0"/>
    </testsuite>
    <testsuite failures="0" name="isClipRect() tests" package="tests/suites/utils" tests="5" time="0.002">
        <testcase classname="tests/suites/utils" name="isClipRect() checks for a ClipRect" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isClipRect() checks for a ClipRect" time="0"/>
        <testcase classname="tests/suites/utils" name="isClipRect() checks for a ClipRect" time="0"/>
        <testcase classname="tests/suites/utils" name="isClipRect() checks for a ClipRect" time="0"/>
        <testcase classname="tests/suites/utils" name="isClipRect() checks for a ClipRect" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="isHTTPResource() tests" package="tests/suites/utils" tests="6" time="0.001">
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0"/>
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0"/>
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0"/>
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0"/>
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isHTTPResource() checks for an HTTP resource" time="0"/>
    </testsuite>
    <testsuite failures="0" name="isObject() tests" package="tests/suites/utils" tests="8" time="0.004">
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0.002"/>
        <testcase classname="tests/suites/utils" name="isObject() checks for an Object" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="isValidSelector() tests" package="tests/suites/utils" tests="10" time="0.002">
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isValidSelector() checks for a valid selector" time="0"/>
    </testsuite>
    <testsuite failures="0" name="isWebPage() tests" package="tests/suites/utils" tests="3" time="0.002">
        <testcase classname="tests/suites/utils" name="isWebPage() checks for a WebPage instance" time="0"/>
        <testcase classname="tests/suites/utils" name="isWebPage() checks for a WebPage instance" time="0.002"/>
        <testcase classname="tests/suites/utils" name="isWebPage() checks for a WebPage instance" time="0"/>
    </testsuite>
    <testsuite failures="0" name="isJsFile() tests" package="tests/suites/utils" tests="5" time="0.001">
        <testcase classname="tests/suites/utils" name="isJsFile() checks for js file" time="0"/>
        <testcase classname="tests/suites/utils" name="isJsFile() checks for js file" time="0"/>
        <testcase classname="tests/suites/utils" name="isJsFile() checks for js file" time="0.001"/>
        <testcase classname="tests/suites/utils" name="isJsFile() checks for js file" time="0"/>
        <testcase classname="tests/suites/utils" name="isJsFile() checks for js file" time="0"/>
    </testsuite>
    <testsuite failures="0" name="mergeObjects() tests" package="tests/suites/utils" tests="5" time="0.002">
        <testcase classname="tests/suites/utils" name="mergeObjects() can merge objects" time="0.001"/>
        <testcase classname="tests/suites/utils" name="mergeObjects() can merge objects" time="0"/>
        <testcase classname="tests/suites/utils" name="mergeObjects() can merge objects" time="0"/>
        <testcase classname="tests/suites/utils" name="mergeObjects() can merge objects" time="0"/>
        <testcase classname="tests/suites/utils" name="mergeObjects() can merge objects" time="0.001"/>
    </testsuite>
    <testsuite failures="0" name="unique() tests" package="tests/suites/utils" tests="4" time="0.001">
        <testcase classname="tests/suites/utils" name="unique() computes unique values of an array" time="0.001"/>
        <testcase classname="tests/suites/utils" name="unique() computes unique values of an array" time="0"/>
        <testcase classname="tests/suites/utils" name="unique() computes unique values of an array" time="0"/>
        <testcase classname="tests/suites/utils" name="unique() computes unique values of an array" time="0"/>
    </testsuite>
    <testsuite failures="0" name="XUnitReporter() initialization" package="tests/suites/xunit" tests="1" time="0.075">
        <testcase classname="tests/suites/xunit" name="Subject is truthy" time="0.075"/>
    </testsuite>
    <testsuite failures="0" name="XUnitReporter() can hold test suites" package="tests/suites/xunit" tests="4" time="0.008">
        <testcase classname="tests/suites/xunit" name="Evaluated function returns the expected value" time="0.007"/>
        <testcase classname="tests/suites/xunit" name="Found an element matching: testsuites[duration]" time="0"/>
        <testcase classname="tests/suites/xunit" name="Found an element matching: testsuite[name=&quot;foo&quot;][package=&quot;foo&quot;]" time="0.001"/>
        <testcase classname="tests/suites/xunit" name="Found an element matching: testsuite[name=&quot;bar&quot;][package=&quot;bar&quot;]" time="0"/>
    </testsuite>
    <testsuite failures="0" name="XUnitReporter() can hold a suite with a succesful test" package="tests/suites/xunit" tests="1" time="0.005">
        <testcase classname="tests/suites/xunit" name="Found an element matching: testsuite[name=&quot;foo&quot;][package=&quot;foo&quot;][tests=&quot;1&quot;][failures=&quot;0&quot;] testcase[name=&quot;footext&quot;]" time="0.005"/>
    </testsuite>
    <testsuite failures="0" name="GitHub|Repository" package="GitHub|Repository" tests="2" time="0.005">
        <testcase classname="GitHub|Repository" name="GitHub|Repository|Test Case 001" time="0.005"/>
        <testcase classname="GitHub|Repository" name="GitHub|Repository|Test Case 002" time="0.005"/>
    </testsuite>
    <testsuite failures="0" name="GitHub|Projects" package="GitHub|Projects" tests="2" time="0.005">
        <testcase classname="GitHub|Projects" name="GitHub|Projects|Test Case 001" time="0.005"/>
        <testcase classname="GitHub|Projects" name="GitHub|Projects|Test Case 002" time="0.005"/>
    </testsuite>
    <testsuite failures="0" name="GitHub|Pull Requests" package="GitHub|Pull Requests" tests="2" time="0.005">
        <testcase classname="GitHub|Pull Requests" name="GitHub|Pull Requests|Test Case 001" time="0.005"/>
        <testcase classname="GitHub|Pull Requests" name="GitHub|Pull Requests|Test Case 002" time="0.005"/>
    </testsuite>
    <testsuite failures="0" name="GitHub|Teams" package="GitHub|Teams" tests="2" time="0.005">
        <testcase classname="GitHub|Teams" name="GitHub|Teams|Test Case 001" time="0.005"/>
        <testcase classname="GitHub|Teams" name="GitHub|Teams|Test Case 002" time="0.005"/>
    </testsuite>
</testsuites>
